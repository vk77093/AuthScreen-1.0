@page "/multi"

<EditForm Model="nameTables" OnValidSubmit="HandleForm">
<DataAnnotationsValidator/>
<ValidationSummary/>
 
@*<input type="text" @bind="newTodo.UserName"/>
     <label>City Name</label>
    <input type="text" @bind="newTodo.City"/>*@
 <button type="button" @onclick="AddTodo">Add Field</button>
 <br />
 
@*@foreach (var item in nameTables)
{*@
        
            
            @*<label>User Name</label>
    <input type="text" @bind-value="item.UserName"/>
     <label>User Name</label>
    <input type="text" @bind-value="item.City"/>*@
@*<ul>
<li>
    @item.UserName @item.City
    @for(int i=0; i < nameTables.Count(); i++)
        {
            int index = i;
      <button type="button" @onclick="() => RemoveValue(index)" class="btn btn-outline-danger">Remove</button>
       }
</li>
</ul>
          
}*@
<div class="row">
       <div class="col-sm-12 col-md-12">
@for (int i = 0; i < nameTables.Count(); i++)
    {
        int index = i;
      <div class="form-group">
          <label>User Name</label>
    <input type="text" value="@nameTables[i].UserName" @onchange="((e)=>UpdateValue(index,e.Value.ToString()))"/>
     <label>City Name</label>
    <input type="text" value="@nameTables[i].City" @onchange="((e)=>UpdateValue2(index,e.Value.ToString()))"/>
     <label>State Name</label>
    <input type="text" value="@nameTables[i].State" @onchange="((e)=>UpdateValue3(index,e.Value.ToString()))"/>
     <label>Pin Code</label>
    <input type="number" value="@nameTables[i].Pincode" @onchange="((e)=>UpdateValue4(index,Convert.ToInt32(e.Value.ToString())))"/>
   @*  @((MarkupString)DeleteBtn)*@
      <button type="button" @onclick="() => RemoveValue(index)" class="btn btn-outline-danger">Remove</button>
      </div>
      
    }
     </div>
   </div> 
 
    <hr />
    <div>
        <button type="submit" class="btn btn-success">Submit</button>
    </div>
</EditForm>

@code {
    private List<NameTable> nameTables = new List<NameTable>();
    [Inject]
    private IMultiTest? multiTestRepo { get; set; }
    [Inject]
    private NavigationManager Nvm { get; set; }
    private NameTable? newTodo=new NameTable();
    private string? DeleteBtn;
    private void HandleForm()
    {
        multiTestRepo?.AddAllTableValue(nameTables);
         Nvm.NavigateTo("/");

    }
     private void UpdateValue(int i, string data) => nameTables[i].UserName=data;
     private void UpdateValue2(int i, string data) => nameTables[i].City=data;
      private void UpdateValue3(int i, string data) => nameTables[i].State=data;
     private void UpdateValue4(int i, int data) => nameTables[i].Pincode=data;
    private void AddTodo()
    {
        //if (newTodo !=null)
        //{
        //todos.Add(new TodoItem { Title = newTodo });
        //newTodo = string.Empty;
        nameTables.Add(new NameTable
                {
                    UserName = newTodo.UserName,
                    City = newTodo.City,
                });
       // newTodo = new NameTable();
        DeleteBtn = $"<button type='button' @onclick='() => RemoveValue(index)' class='btn btn-outline-danger'>Remove</button>";
        //}
    }
    private void RemoveValue(int i)
    {
        
        if (i > 0)
        {
            nameTables.RemoveAt(i);
        }
    }
}
